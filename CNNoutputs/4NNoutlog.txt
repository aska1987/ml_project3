(49500, 1, 48, 48) (49500,)
(500, 1, 48, 48) (500,)
48
training
# Neural Network with 115210 learnable parameters

## Layer information

name      size        total    cap.Y    cap.X    cov.Y    cov.X    filter
 Y    filter X    field Y    field X
--------  --------  -------  -------  -------  -------  -------  --------
--  ----------  ---------  ---------
input     1x48x48      2304   100.00   100.00   100.00   100.00          
48          48         48         48
conv2d1   16x44x44    30976   100.00   100.00    10.42    10.42          
 5           5          5          5
maxpool1  16x22x22     7744   100.00   100.00    10.42    10.42          
 5           5          5          5
conv2d2   32x20x20    12800    66.67    66.67    18.75    18.75          
 6           6          9          9
maxpool2  32x10x10     3200    66.67    66.67    18.75    18.75          
 6           6          9          9
conv2d3   64x8x8       4096    70.59    70.59    35.42    35.42          
12          12         17         17
maxpool3  64x4x4       1024    70.59    70.59    35.42    35.42          
12          12         17         17
conv2d4   128x2x2       512    72.73    72.73    68.75    68.75          
24          24         33         33
maxpool4  128x1x1       128    72.73    72.73    68.75    68.75          
24          24         33         33
dense1    128           128   100.00   100.00   100.00   100.00          
48          48         48         48
dropout2  128           128   100.00   100.00   100.00   100.00          
48          48         48         48
output    10             10   100.00   100.00   100.00   100.00          
48   

Explanation
    X, Y:    image dimensions
    cap.:    learning capacity
    cov.:    coverage of image
    magenta: capacity too low (<1/6)
    cyan:    image coverage too high (>100%)
    red:     capacity too low and coverage too high


  epoch    train loss    valid loss    train/val    valid acc  dur
-------  ------------  ------------  -----------  -----------  -------
      1       2.29662       2.26846      1.01242      0.23302  873.88s
      2       1.98502       1.52779      1.29927      0.48000  866.88s
      3       1.32199       0.95843      1.37933      0.67687  962.92s
      4       0.90420       0.69695      1.29737      0.76737  894.34s
      5       0.67381       0.56071      1.20169      0.81782  860.15s
      6       0.53259       0.46048      1.15659      0.85409  824.34s
      7       0.44610       0.41742      1.06873      0.86546  855.21s
      8       0.38321       0.40396      0.94863      0.86987  867.73s
      9       0.33370       0.35873      0.93023      0.88674  820.78s
     10       0.29442       0.38275      0.76923      0.87817  827.17s
     11       0.26589       0.35911      0.74041      0.88718  825.49s
     12       0.23877       0.36851      0.64793      0.88594  817.16s
     13       0.21156       0.35565      0.59484      0.89079  804.59s
     14       0.19282       0.35892      0.53722      0.89405  812.77s
     15       0.17503       0.37597      0.46555      0.89275  836.42s
     16       0.15687       0.38692      0.40543      0.88899  814.92s
     17       0.13978       0.35405      0.39481      0.90005  847.72s
     18       0.13010       0.36305      0.35835      0.90145  809.71s
     19       0.12434       0.39630      0.31376      0.89726  824.17s
     20       0.11165       0.38393      0.29080      0.90252  819.22s
training complete
predicting...
predicting done.

PARAMS: {'output_nonlinearity': <function softmax at 0x7f65881811b8>, 've
rbose': 1000000, 'y_tensor_type': TensorType(int32, vector), 'update_lear
ning_rate': 0.01, 'batch_iterator_test': <nolearn.lasagne.base.BatchItera
tor object at 0x7f65871c4750>, 'conv2d3_nonlinearity': <function rectify 
at 0x7f65881812a8>, 'conv2d4_num_filters': 128, 'max_epochs': 20, 'dropou
t2_p': 0.5, 'regression': False, 'X_tensor_type': None, 'layers': [('inpu
t', <class 'lasagne.layers.input.InputLayer'>), ('conv2d1', <class 'lasag
ne.layers.conv.Conv2DLayer'>), ('maxpool1', <class 'lasagne.layers.pool.M
axPool2DLayer'>), ('conv2d2', <class 'lasagne.layers.conv.Conv2DLayer'>),
 ('maxpool2', <class 'lasagne.layers.pool.MaxPool2DLayer'>), ('conv2d3', 
<class 'lasagne.layers.conv.Conv2DLayer'>), ('maxpool3', <class 'lasagne.
layers.pool.MaxPool2DLayer'>), ('conv2d4', <class 'lasagne.layers.conv.Co
nv2DLayer'>), ('maxpool4', <class 'lasagne.layers.pool.MaxPool2DLayer'>),
 ('dense1', <class 'lasagne.layers.dense.DenseLayer'>), ('dropout2', <cla
ss 'lasagne.layers.noise.DropoutLayer'>), ('output', <class 'lasagne.laye
rs.dense.DenseLayer'>)], 'batch_iterator_train': <nolearn.lasagne.base.Ba
tchIterator object at 0x7f65871c46d0>, 'conv2d3_filter_size': (3, 3), 'on
_epoch_finished': [<nolearn.lasagne.handlers.PrintLog instance at 0x7f658
71c2a70>], 'train_split': <nolearn.lasagne.base.TrainSplit object at 0x7f
65871c4790>, 'conv2d2_filter_size': (3, 3), 'conv2d1_nonlinearity': <func
tion rectify at 0x7f65881812a8>, 'maxpool1_pool_size': (2, 2), 'objective
': <function objective at 0x7f65871c66e0>, 'conv2d4_nonlinearity': <funct
ion rectify at 0x7f65881812a8>, 'output_num_units': 10, 'conv2d1_num_filt
ers': 16, 'use_label_encoder': False, 'on_training_finished': [], 'object
ive_loss_function': <function categorical_crossentropy at 0x7f6587fd36e0>
, 'update': <function nesterov_momentum at 0x7f6587fd3de8>, 'custom_score
': None, 'input_shape': (None, 1, 48, 48), 'conv2d1_filter_size': (5, 5),
 'maxpool3_pool_size': (2, 2), 'on_batch_finished': [], 'loss': None, 'co
nv2d1_W': <lasagne.init.GlorotUniform object at 0x7f65871c4bd0>, 'conv2d2
_nonlinearity': <function rectify at 0x7f65881812a8>, 'conv2d2_num_filter
s': 32, 'on_training_started': [<nolearn.lasagne.handlers.PrintLayerInfo 
instance at 0x7f65871c2ab8>], 'conv2d2_W': <lasagne.init.GlorotUniform ob
ject at 0x7f65871c4cd0>, 'maxpool2_pool_size': (2, 2), 'conv2d3_num_filte
rs': 64, 'more_params': {}, 'conv2d3_W': <lasagne.init.GlorotUniform obje
ct at 0x7f65871c4b10>, 'maxpool4_pool_size': (2, 2), 'dense1_num_units': 
128, 'conv2d4_filter_size': (3, 3), 'conv2d4_W': <lasagne.init.GlorotUnif
orm object at 0x7f65871c4b50>}                                           
nn.score:
0.916
confusion_matrix:
/usr/local/lib/python2.7/dist-packages/numpy/core/fromnumeric.py:2641: Vi
sibleDeprecationWarning: `rank` is deprecated; use the `ndim` attribute o
r function instead. To find the rank of a matrix see `numpy.linalg.matrix
_rank`.
  VisibleDeprecationWarning)
[[45  0  0  0  0  0  1  0  0  0]
 [ 0 61  0  0  0  0  0  0  0  0]
 [ 1  0 41  0  0  0  0  0  3  0]
 [ 0  0  1 51  1  1  0  0  0  0]
 [ 0  0  0  0 54  0  0  1  1  2]
 [ 0  0  0  1  1 47  0  0  0  0]
 [ 0  1  0  0  0  0 45  1  0  4]
 [ 0  0  2  0  3  0  0 42  0  1]
 [ 0  1  0  0  2  0  1  0 42  0]
 [ 2  0  0  1  4  1  3  0  1 30]]
Pickle saved
terminate